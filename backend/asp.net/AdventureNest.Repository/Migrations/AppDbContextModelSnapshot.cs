// <auto-generated />
using System;
using AdventureNest.Repository;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace AdventureNest.Repository.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.15")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("AdventureNest.Core.Models.Booking", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("BookingDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("BookingStatus")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<DateTime>("CheckInDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<DateTime>("DepartureDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("PricePerDay")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("PublicationId")
                        .HasColumnType("int");

                    b.Property<decimal>("TotalPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("PublicationId");

                    b.ToTable("Bookings", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BookingDate = new DateTime(2023, 5, 27, 16, 0, 52, 779, DateTimeKind.Local).AddTicks(8147),
                            BookingStatus = "Booked",
                            CheckInDate = new DateTime(2023, 8, 11, 10, 30, 0, 0, DateTimeKind.Unspecified),
                            CreatedDate = new DateTime(2023, 5, 27, 16, 0, 52, 779, DateTimeKind.Local).AddTicks(8146),
                            CustomerId = 2,
                            DepartureDate = new DateTime(2023, 8, 17, 10, 30, 0, 0, DateTimeKind.Unspecified),
                            PricePerDay = 1000m,
                            PublicationId = 1,
                            TotalPrice = 6000m
                        },
                        new
                        {
                            Id = 2,
                            BookingDate = new DateTime(2023, 5, 27, 16, 0, 52, 779, DateTimeKind.Local).AddTicks(8250),
                            BookingStatus = "Booked",
                            CheckInDate = new DateTime(2023, 9, 5, 10, 30, 0, 0, DateTimeKind.Unspecified),
                            CreatedDate = new DateTime(2023, 5, 27, 16, 0, 52, 779, DateTimeKind.Local).AddTicks(8250),
                            CustomerId = 3,
                            DepartureDate = new DateTime(2023, 9, 9, 10, 30, 0, 0, DateTimeKind.Unspecified),
                            PricePerDay = 4000m,
                            PublicationId = 2,
                            TotalPrice = 16000m
                        },
                        new
                        {
                            Id = 3,
                            BookingDate = new DateTime(2023, 5, 27, 16, 0, 52, 779, DateTimeKind.Local).AddTicks(8262),
                            BookingStatus = "Booked",
                            CheckInDate = new DateTime(2023, 10, 21, 10, 30, 0, 0, DateTimeKind.Unspecified),
                            CreatedDate = new DateTime(2023, 5, 27, 16, 0, 52, 779, DateTimeKind.Local).AddTicks(8262),
                            CustomerId = 1,
                            DepartureDate = new DateTime(2023, 10, 27, 10, 30, 0, 0, DateTimeKind.Unspecified),
                            PricePerDay = 800m,
                            PublicationId = 3,
                            TotalPrice = 48000m
                        },
                        new
                        {
                            Id = 4,
                            BookingDate = new DateTime(2023, 5, 27, 16, 0, 52, 779, DateTimeKind.Local).AddTicks(8272),
                            BookingStatus = "Booked",
                            CheckInDate = new DateTime(2023, 12, 1, 10, 30, 0, 0, DateTimeKind.Unspecified),
                            CreatedDate = new DateTime(2023, 5, 27, 16, 0, 52, 779, DateTimeKind.Local).AddTicks(8271),
                            CustomerId = 3,
                            DepartureDate = new DateTime(2023, 8, 10, 10, 30, 0, 0, DateTimeKind.Unspecified),
                            PricePerDay = 1000m,
                            PublicationId = 4,
                            TotalPrice = 10000m
                        },
                        new
                        {
                            Id = 5,
                            BookingDate = new DateTime(2023, 5, 27, 16, 0, 52, 779, DateTimeKind.Local).AddTicks(8281),
                            BookingStatus = "Booked",
                            CheckInDate = new DateTime(2023, 8, 11, 10, 30, 0, 0, DateTimeKind.Unspecified),
                            CreatedDate = new DateTime(2023, 5, 27, 16, 0, 52, 779, DateTimeKind.Local).AddTicks(8281),
                            CustomerId = 1,
                            DepartureDate = new DateTime(2023, 8, 17, 10, 30, 0, 0, DateTimeKind.Unspecified),
                            PricePerDay = 2500m,
                            PublicationId = 5,
                            TotalPrice = 15000m
                        },
                        new
                        {
                            Id = 6,
                            BookingDate = new DateTime(2023, 5, 27, 16, 0, 52, 779, DateTimeKind.Local).AddTicks(8291),
                            BookingStatus = "Booked",
                            CheckInDate = new DateTime(2023, 5, 8, 10, 30, 0, 0, DateTimeKind.Unspecified),
                            CreatedDate = new DateTime(2023, 5, 27, 16, 0, 52, 779, DateTimeKind.Local).AddTicks(8290),
                            CustomerId = 2,
                            DepartureDate = new DateTime(2023, 5, 12, 10, 30, 0, 0, DateTimeKind.Unspecified),
                            PricePerDay = 200m,
                            PublicationId = 6,
                            TotalPrice = 800m
                        });
                });

            modelBuilder.Entity("AdventureNest.Core.Models.Property", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<int>("BathroomCount")
                        .HasColumnType("int");

                    b.Property<int>("BedCount")
                        .HasColumnType("int");

                    b.Property<int>("BedroomCount")
                        .HasColumnType("int");

                    b.Property<string>("BookingType")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsBed")
                        .HasColumnType("bit");

                    b.Property<bool>("IsBlender")
                        .HasColumnType("bit");

                    b.Property<bool>("IsCoffeeMaker")
                        .HasColumnType("bit");

                    b.Property<bool>("IsCouch")
                        .HasColumnType("bit");

                    b.Property<bool>("IsGasStove")
                        .HasColumnType("bit");

                    b.Property<bool>("IsMicrowave")
                        .HasColumnType("bit");

                    b.Property<bool>("IsMixingBowl")
                        .HasColumnType("bit");

                    b.Property<bool>("IsRefrigerator")
                        .HasColumnType("bit");

                    b.Property<bool>("IsTv")
                        .HasColumnType("bit");

                    b.Property<bool>("IsWashingMachine")
                        .HasColumnType("bit");

                    b.Property<float>("Latitude")
                        .HasColumnType("real");

                    b.Property<float>("Longtitude")
                        .HasColumnType("real");

                    b.Property<int>("MaxGuestCount")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<int>("OwnerId")
                        .HasColumnType("int");

                    b.Property<string>("PhotographsPathList")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PropertyType")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("OwnerId");

                    b.ToTable("Properties", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Address = "Serdivan",
                            BathroomCount = 5,
                            BedCount = 12,
                            BedroomCount = 6,
                            BookingType = "Full House",
                            City = "Sakarya",
                            Country = "Turkey",
                            CreatedDate = new DateTime(2023, 5, 27, 16, 0, 52, 779, DateTimeKind.Local).AddTicks(8455),
                            IsBed = true,
                            IsBlender = true,
                            IsCoffeeMaker = true,
                            IsCouch = true,
                            IsGasStove = true,
                            IsMicrowave = true,
                            IsMixingBowl = true,
                            IsRefrigerator = true,
                            IsTv = true,
                            IsWashingMachine = true,
                            Latitude = 0f,
                            Longtitude = 0f,
                            MaxGuestCount = 15,
                            Name = "Serdivan Villa",
                            OwnerId = 1,
                            PhotographsPathList = "path1,path2,path3,path4,path5",
                            PropertyType = "Villa"
                        },
                        new
                        {
                            Id = 2,
                            Address = "Miami Beach",
                            BathroomCount = 5,
                            BedCount = 8,
                            BedroomCount = 5,
                            BookingType = "Villa",
                            City = "Miami",
                            Country = "USA",
                            CreatedDate = new DateTime(2023, 5, 27, 16, 0, 52, 779, DateTimeKind.Local).AddTicks(8463),
                            IsBed = true,
                            IsBlender = true,
                            IsCoffeeMaker = true,
                            IsCouch = true,
                            IsGasStove = true,
                            IsMicrowave = true,
                            IsMixingBowl = true,
                            IsRefrigerator = true,
                            IsTv = true,
                            IsWashingMachine = true,
                            Latitude = 0f,
                            Longtitude = 0f,
                            MaxGuestCount = 10,
                            Name = "Miami Villa",
                            OwnerId = 1,
                            PhotographsPathList = "path1,path2,path3,path4,path5",
                            PropertyType = "Villa"
                        },
                        new
                        {
                            Id = 3,
                            Address = "Kadikoy",
                            BathroomCount = 1,
                            BedCount = 3,
                            BedroomCount = 4,
                            BookingType = "Full House",
                            City = "Istanbul",
                            Country = "Turkey",
                            CreatedDate = new DateTime(2023, 5, 27, 16, 0, 52, 779, DateTimeKind.Local).AddTicks(8467),
                            IsBed = true,
                            IsBlender = true,
                            IsCoffeeMaker = true,
                            IsCouch = true,
                            IsGasStove = true,
                            IsMicrowave = true,
                            IsMixingBowl = true,
                            IsRefrigerator = true,
                            IsTv = true,
                            IsWashingMachine = true,
                            Latitude = 0f,
                            Longtitude = 0f,
                            MaxGuestCount = 4,
                            Name = "Istanbul Kadikoy House",
                            OwnerId = 2,
                            PhotographsPathList = "path1,path2,path3,path4,path5",
                            PropertyType = "Flat"
                        },
                        new
                        {
                            Id = 4,
                            Address = "Sosun Magu",
                            BathroomCount = 1,
                            BedCount = 2,
                            BedroomCount = 2,
                            BookingType = "Full House",
                            City = "Hithadhoo",
                            Country = "Maldives",
                            CreatedDate = new DateTime(2023, 5, 27, 16, 0, 52, 779, DateTimeKind.Local).AddTicks(8471),
                            IsBed = true,
                            IsBlender = true,
                            IsCoffeeMaker = true,
                            IsCouch = true,
                            IsGasStove = true,
                            IsMicrowave = true,
                            IsMixingBowl = true,
                            IsRefrigerator = true,
                            IsTv = true,
                            IsWashingMachine = true,
                            Latitude = 0f,
                            Longtitude = 0f,
                            MaxGuestCount = 4,
                            Name = "Maldives Bungalow",
                            OwnerId = 2,
                            PhotographsPathList = "path1,path2,path3,path4,path5",
                            PropertyType = "Villa"
                        },
                        new
                        {
                            Id = 5,
                            Address = "Capitana",
                            BathroomCount = 2,
                            BedCount = 2,
                            BedroomCount = 2,
                            BookingType = "Full House",
                            City = "Cagliari",
                            Country = "Italy",
                            CreatedDate = new DateTime(2023, 5, 27, 16, 0, 52, 779, DateTimeKind.Local).AddTicks(8474),
                            IsBed = true,
                            IsBlender = true,
                            IsCoffeeMaker = true,
                            IsCouch = true,
                            IsGasStove = true,
                            IsMicrowave = true,
                            IsMixingBowl = true,
                            IsRefrigerator = true,
                            IsTv = true,
                            IsWashingMachine = true,
                            Latitude = 0f,
                            Longtitude = 0f,
                            MaxGuestCount = 3,
                            Name = "Sardinia Hotel Room",
                            OwnerId = 3,
                            PhotographsPathList = "path1,path2,path3,path4,path5",
                            PropertyType = "Hotel"
                        },
                        new
                        {
                            Id = 6,
                            Address = "Champ-Elysee",
                            BathroomCount = 1,
                            BedCount = 1,
                            BedroomCount = 1,
                            BookingType = "Single Room",
                            City = "Paris",
                            Country = "France",
                            CreatedDate = new DateTime(2023, 5, 27, 16, 0, 52, 779, DateTimeKind.Local).AddTicks(8476),
                            IsBed = true,
                            IsBlender = true,
                            IsCoffeeMaker = true,
                            IsCouch = true,
                            IsGasStove = true,
                            IsMicrowave = true,
                            IsMixingBowl = true,
                            IsRefrigerator = true,
                            IsTv = true,
                            IsWashingMachine = true,
                            Latitude = 0f,
                            Longtitude = 0f,
                            MaxGuestCount = 2,
                            Name = "Paris Studio",
                            OwnerId = 3,
                            PhotographsPathList = "path1,path2,path3,path4,path5",
                            PropertyType = "Flat"
                        });
                });

            modelBuilder.Entity("AdventureNest.Core.Models.Publication", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("PropertyId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)")
                        .HasColumnName("Title");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("PropertyId")
                        .IsUnique();

                    b.ToTable("Publications", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedDate = new DateTime(2023, 5, 27, 16, 0, 52, 779, DateTimeKind.Local).AddTicks(7931),
                            Description = "Villa with Sapanca Lake view",
                            IsActive = true,
                            Price = 1000m,
                            PropertyId = 1,
                            Title = "Sakarya Lux Villa House"
                        },
                        new
                        {
                            Id = 2,
                            CreatedDate = new DateTime(2023, 5, 27, 16, 0, 52, 779, DateTimeKind.Local).AddTicks(7944),
                            Description = "Villa with Miami Beach view",
                            IsActive = true,
                            Price = 4000m,
                            PropertyId = 2,
                            Title = "Ultra Lux Villa in Miami"
                        },
                        new
                        {
                            Id = 3,
                            CreatedDate = new DateTime(2023, 5, 27, 16, 0, 52, 779, DateTimeKind.Local).AddTicks(7946),
                            Description = "A beautiful house in the center of Kadıköy",
                            IsActive = true,
                            Price = 800m,
                            PropertyId = 3,
                            Title = "Comfortable House in Kadikoy"
                        },
                        new
                        {
                            Id = 4,
                            CreatedDate = new DateTime(2023, 5, 27, 16, 0, 52, 779, DateTimeKind.Local).AddTicks(7948),
                            Description = "Ultra luxury all-inclusive accommodation by the ocean in the Maldives",
                            IsActive = true,
                            Price = 1000m,
                            PropertyId = 4,
                            Title = "Unique Villa with deep blue ocean view"
                        },
                        new
                        {
                            Id = 5,
                            CreatedDate = new DateTime(2023, 5, 27, 16, 0, 52, 779, DateTimeKind.Local).AddTicks(7949),
                            Description = "A hotel room in the unique beauty of the island of Sardinia",
                            IsActive = true,
                            Price = 2500m,
                            PropertyId = 5,
                            Title = "All inclusive hotel room with sea view"
                        },
                        new
                        {
                            Id = 6,
                            CreatedDate = new DateTime(2023, 5, 27, 16, 0, 52, 779, DateTimeKind.Local).AddTicks(7950),
                            Description = "One room house",
                            IsActive = true,
                            Price = 200m,
                            PropertyId = 6,
                            Title = "Affordable studio home in Paris"
                        });
                });

            modelBuilder.Entity("AdventureNest.Core.Models.Token", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<DateTime>("ExpirationTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserToken")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId");

                    b.ToTable("Tokens");
                });

            modelBuilder.Entity("AdventureNest.Core.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.Property<byte[]>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<byte[]>("PasswordSalt")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("Picture")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Users", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedDate = new DateTime(2023, 9, 9, 10, 30, 0, 0, DateTimeKind.Unspecified),
                            Email = "string1@hotmail.com",
                            FirstName = "string1",
                            LastName = "string1",
                            PasswordHash = new byte[] { 133, 89, 125, 3, 70, 216, 35, 247, 178, 168, 221, 126, 254, 154, 181, 220, 128, 139, 212, 176, 160, 73, 252, 129, 42, 20, 85, 177, 55, 85, 247, 68, 125, 31, 13, 168, 183, 19, 18, 15, 105, 181, 23, 182, 68, 220, 6, 48, 159, 50, 2, 57, 122, 9, 80, 96, 177, 124, 93, 71, 104, 192, 103, 31 },
                            PasswordSalt = new byte[] { 136, 214, 117, 70, 122, 243, 215, 176, 31, 88, 36, 244, 154, 148, 67, 87, 77, 47, 104, 99, 114, 185, 62, 127, 45, 79, 129, 173, 136, 70, 106, 138, 70, 141, 19, 218, 195, 159, 117, 152, 182, 96, 123, 255, 88, 127, 23, 222, 72, 220, 37, 156, 14, 113, 214, 93, 178, 153, 35, 56, 210, 101, 106, 129, 84, 188, 24, 168, 25, 47, 235, 136, 44, 229, 255, 210, 49, 45, 173, 17, 69, 54, 218, 239, 169, 50, 224, 160, 67, 168, 150, 216, 169, 214, 8, 148, 134, 140, 255, 153, 214, 140, 65, 99, 154, 88, 17, 79, 145, 246, 135, 230, 71, 158, 230, 214, 65, 185, 103, 141, 56, 243, 25, 137, 189, 245, 204, 142 },
                            Picture = "string1"
                        },
                        new
                        {
                            Id = 2,
                            CreatedDate = new DateTime(2023, 8, 8, 10, 30, 0, 0, DateTimeKind.Unspecified),
                            Email = "string2@hotmail.com",
                            FirstName = "string2",
                            LastName = "string2",
                            PasswordHash = new byte[] { 148, 140, 250, 240, 194, 206, 150, 229, 84, 213, 192, 158, 150, 182, 209, 186, 33, 167, 231, 149, 86, 123, 10, 146, 11, 142, 131, 164, 235, 23, 130, 86, 195, 79, 117, 70, 18, 158, 79, 132, 202, 16, 242, 10, 218, 65, 7, 84, 245, 52, 20, 119, 172, 48, 129, 81, 9, 16, 240, 244, 198, 232, 75, 27 },
                            PasswordSalt = new byte[] { 56, 159, 183, 5, 52, 242, 219, 6, 155, 139, 68, 4, 120, 73, 185, 57, 171, 25, 194, 195, 93, 124, 100, 69, 180, 61, 96, 51, 176, 159, 178, 69, 176, 199, 73, 176, 140, 29, 102, 4, 254, 218, 121, 149, 40, 94, 159, 39, 233, 1, 215, 173, 72, 68, 87, 211, 20, 8, 76, 210, 57, 99, 134, 96, 126, 33, 28, 195, 60, 119, 2, 14, 38, 142, 20, 35, 133, 247, 9, 184, 145, 145, 196, 76, 24, 33, 174, 100, 194, 32, 127, 170, 240, 163, 182, 50, 226, 182, 106, 20, 150, 82, 52, 246, 97, 226, 107, 61, 29, 4, 16, 9, 229, 31, 241, 149, 202, 39, 0, 184, 168, 248, 27, 159, 182, 111, 114, 105 },
                            Picture = "string2"
                        },
                        new
                        {
                            Id = 3,
                            CreatedDate = new DateTime(2023, 7, 7, 10, 30, 0, 0, DateTimeKind.Unspecified),
                            Email = "string3@hotmail.com",
                            FirstName = "string3",
                            LastName = "string3",
                            PasswordHash = new byte[] { 24, 172, 120, 216, 222, 81, 93, 118, 34, 73, 252, 0, 16, 90, 223, 137, 11, 54, 126, 177, 253, 136, 149, 105, 60, 145, 71, 10, 254, 231, 97, 237, 41, 213, 36, 3, 237, 242, 71, 61, 17, 72, 131, 96, 173, 210, 166, 220, 172, 252, 225, 43, 42, 67, 63, 126, 108, 163, 46, 77, 255, 149, 51, 152 },
                            PasswordSalt = new byte[] { 63, 153, 161, 111, 123, 5, 88, 232, 206, 76, 87, 169, 210, 166, 212, 197, 106, 61, 125, 225, 39, 217, 106, 71, 49, 43, 38, 19, 60, 93, 129, 237, 90, 32, 238, 224, 119, 5, 11, 200, 89, 66, 94, 168, 180, 152, 34, 251, 75, 139, 205, 17, 91, 16, 70, 207, 21, 185, 12, 22, 156, 71, 239, 84, 134, 137, 55, 248, 4, 115, 44, 197, 17, 213, 2, 222, 101, 203, 205, 220, 6, 141, 246, 138, 58, 54, 78, 17, 169, 100, 44, 146, 62, 213, 164, 204, 75, 92, 32, 122, 175, 65, 8, 110, 223, 145, 200, 248, 123, 26, 125, 84, 152, 222, 123, 185, 196, 113, 137, 36, 155, 208, 243, 75, 148, 72, 200, 102 },
                            Picture = "string3"
                        });
                });

            modelBuilder.Entity("AdventureNest.Core.Models.Booking", b =>
                {
                    b.HasOne("AdventureNest.Core.Models.Publication", "Publication")
                        .WithMany("Bookings")
                        .HasForeignKey("PublicationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Publication");
                });

            modelBuilder.Entity("AdventureNest.Core.Models.Property", b =>
                {
                    b.HasOne("AdventureNest.Core.Models.User", "User")
                        .WithMany("Properties")
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("AdventureNest.Core.Models.Publication", b =>
                {
                    b.HasOne("AdventureNest.Core.Models.Property", "Property")
                        .WithOne("Publication")
                        .HasForeignKey("AdventureNest.Core.Models.Publication", "PropertyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Property");
                });

            modelBuilder.Entity("AdventureNest.Core.Models.Property", b =>
                {
                    b.Navigation("Publication")
                        .IsRequired();
                });

            modelBuilder.Entity("AdventureNest.Core.Models.Publication", b =>
                {
                    b.Navigation("Bookings");
                });

            modelBuilder.Entity("AdventureNest.Core.Models.User", b =>
                {
                    b.Navigation("Properties");
                });
#pragma warning restore 612, 618
        }
    }
}
